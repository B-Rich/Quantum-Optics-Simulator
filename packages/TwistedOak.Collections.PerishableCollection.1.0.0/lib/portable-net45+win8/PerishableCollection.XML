<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PerishableCollection</name>
    </assembly>
    <members>
        <member name="T:TwistedOak.Collections.Perishable`1">
            <summary>An item augmented with a lifetime.</summary>
        </member>
        <member name="F:TwistedOak.Collections.Perishable`1.Value">
            <summary>The value that 'perishes' when the associated lifetime ends.</summary>
        </member>
        <member name="F:TwistedOak.Collections.Perishable`1.Lifetime">
            <summary>The lifetime of the perishable value.</summary>
        </member>
        <member name="M:TwistedOak.Collections.Perishable`1.#ctor(`0,TwistedOak.Util.Lifetime)">
            <summary>Creates a new perishable with the given value and lifetime.</summary>
        </member>
        <member name="M:TwistedOak.Collections.Perishable`1.ToString">
            <summary>A string representation of the perishable value.</summary>
        </member>
        <member name="T:TwistedOak.Collections.PerishableCollection`1">
            <summary>
            A thread-safe collection that supports both enumeration and observation, where added items are automatically removed when they perish.
            Supports constant time addition and removal of items.
            Useful for when you want to create projected or filtered views of a collection that support 'an item was removed' notifications in a nice way.
            In particular, the pairing of items with lifetimes means the views don't have to worry about details like 'do I remove X_1 or X_2 when I find out that X was removed?'.
            </summary>
        </member>
        <member name="M:TwistedOak.Collections.PerishableCollection`1.#ctor">
            <summary>Creates a new empty perishable collection.</summary>
        </member>
        <member name="M:TwistedOak.Collections.PerishableCollection`1.Add(`0,TwistedOak.Util.Lifetime)">
            <summary>Adds an item to the collection, removing it when the given lifetime ends.</summary>
        </member>
        <member name="M:TwistedOak.Collections.PerishableCollection`1.Add(TwistedOak.Collections.Perishable{`0})">
            <summary>Adds an item to the collection, removing it when the item perishes.</summary>
        </member>
        <member name="M:TwistedOak.Collections.PerishableCollection`1.EnumerateAndObserve(System.Action{TwistedOak.Collections.Perishable{`0}},TwistedOak.Util.Lifetime)">
            <summary>
            First, enumerates the items in the collection, passing them to a callback, until caught up with the collection's current state.
            Then, observes future items by subscribing the callback to the OnItem event.
            Stops enumerating and/or observing when the given subscription lifetime ends.
            </summary>
        </member>
        <member name="M:TwistedOak.Collections.PerishableCollection`1.CurrentItems">
            <summary>
            Enumerates non-perished items currently in the collection.
            Items may be added or perished while enumeration is occuring.
            Items added or perished during the enumeration may or may not be included in the result.
            </summary>
        </member>
        <member name="M:TwistedOak.Collections.PerishableCollection`1.CurrentAndFutureItems">
            <summary>
            Returns an observable that observes all non-perished items added to the collection, now and in the future.
            Items may perish while being observed.
            </summary>
        </member>
        <member name="T:TwistedOak.Collections.PerishableUtilities">
            <summary>Utility methods related to perishables and perishable collections.</summary>
        </member>
        <member name="M:TwistedOak.Collections.PerishableUtilities.ToPerishableCollection``1(System.IObservable{TwistedOak.Collections.Perishable{``0}},TwistedOak.Util.Lifetime)">
            <summary>Feeds observed items into a new perishable collection, stopping if a given lifetime ends.</summary>
        </member>
        <member name="M:TwistedOak.Collections.PerishableUtilities.LiftSelect``2(System.IObservable{TwistedOak.Collections.Perishable{``0}},System.Func{``0,``1})">
            <summary>Projects the value of each perishable element of an observable sequence into a new form.</summary>
        </member>
        <member name="M:TwistedOak.Collections.PerishableUtilities.LiftWhere``1(System.IObservable{TwistedOak.Collections.Perishable{``0}},System.Func{``0,System.Boolean})">
            <summary>Filters the perishable elements of an observable sequence by value based on a predicate.</summary>
        </member>
        <member name="M:TwistedOak.Collections.PerishableUtilities.LiftSelect``2(System.Collections.Generic.IEnumerable{TwistedOak.Collections.Perishable{``0}},System.Func{``0,``1})">
            <summary>Projects the value of each perishable element of a sequence into a new form.</summary>
        </member>
        <member name="M:TwistedOak.Collections.PerishableUtilities.LiftWhere``1(System.Collections.Generic.IEnumerable{TwistedOak.Collections.Perishable{``0}},System.Func{``0,System.Boolean})">
            <summary>Filters the perishable elements of a sequence by value based on a predicate.</summary>
        </member>
        <member name="M:TwistedOak.Collections.PerishableUtilities.ObserveNonPerishedCount``1(System.IObservable{TwistedOak.Collections.Perishable{``0}},System.Boolean)">
            <summary>Tracks the number of observed items that have not yet perished, counting up from 0.</summary>
            <param name="observable">The source observable that provides perishable items to be counted.</param>
            <param name="completeWhenSourceCompletes">
            Determines when the resulting observable completes.
            If true, the resulting observable completes as soon as the source observable completes.
            If false, the resulting observable completes when the observed count is 0 and the source observable has completed.
            </param>
        </member>
    </members>
</doc>
